version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    
    working_directory: ~/repo # directory where steps will run

    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk # ...with this image as the primary container; this is where all `steps` will run
      
          
    steps: # a collection of executable commands

      - checkout # check out source code to working directory

      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: spring5-mongo-recipe-app{{ checksum "build.gradle" }}
      
      - run:  gradle dependencies
      
      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: spring5-mongo-recipe-app{{ checksum "build.gradle" }}
      
      - run: gradle clean test 
      - run: gradle jacocoTestReport
      - run:
          name: Save Test Results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*.xml" -exec cp {} ~/junit/ \;
      
      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard. 
      # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: ~/junit
      
      - store_artifacts: # store the uberjar as an artifact
      # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: ~/junit
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
      
      - run:
          name: Send to CodeCov
          command: |-
            # CODECOV_TOKEN="7dba834b-7e12-48a3-a4af-a6b532d6271f"
            bash <(curl -s https://codecov.io/bash) -t 60a60f56-76fc-42cb-95fc-d2987f6bbfba
